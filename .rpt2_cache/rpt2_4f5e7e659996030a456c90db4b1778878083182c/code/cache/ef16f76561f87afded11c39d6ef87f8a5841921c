{
  "code": "import * as tslib_1 from \"tslib\";\r\nimport AnimationManager_Als from \"../../../manager/AnimationManager\";\r\nimport Als_SoundManager from \"../../../common/SoundManager\";\r\nimport GameHomeView_Als from \"../../GameHomeView\";\r\nimport ViewChangeManager_Als from \"../../../games/ViewChangeManager\";\r\nimport GameStateManager_Als from \"../../../games/GameStateManager\";\r\nimport { EnterGameType } from \"../../../games/CommonDefine\";\r\nimport { PlayerDataManager_Als } from \"../../../common/GameDataManager\";\r\nimport GameView_Als from \"../../GameView\";\r\nimport { LevelManager_Als } from \"../../../manager/LevelManager\";\r\nimport ConfigManager_Als from \"../../../games/ConfigManager\";\r\nimport { MiniManeger_Als } from \"../../../minigame/MiniManeger\";\r\nimport MoreGameView_Als from \"../moregame/MoreGameView\";\r\nimport SuccessfulEntryOneView_Als from \"../Als_PopView/SuccessfulEntryOneView\";\r\nimport SuccessfulEntryThreeView_Als from \"../Als_PopView/SuccessfulEntryThreeView\";\r\nimport SuccessfulEntryOneViewTwo_Als from \"../Als_PopView/SuccessfulEntryOneViewTwo\";\r\nimport FailEntryOneView_Als from \"../Als_PopView/SettlementVew/FailEntryOneView\";\r\nvar LevelBase_Als = (function (_super) {\r\n    tslib_1.__extends(LevelBase_Als, _super);\r\n    function LevelBase_Als(data_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.className_key = \"LevelScene\";\r\n        _this.bAniDestory = false;\r\n        _this.index = 0;\r\n        _this.showLabelObj = {};\r\n        _this.showSoundObj = {};\r\n        _this.listPlayedSoundName = [];\r\n        _this.aniArr = [];\r\n        _this.localAniName = null;\r\n        _this.localData = null;\r\n        _this.viewData_ = _this.mapData = data_;\r\n        return _this;\r\n    }\r\n    LevelBase_Als.prototype.onAddStage = function () {\r\n        _super.prototype.onAddStage.call(this);\r\n    };\r\n    LevelBase_Als.prototype.childrenCreated = function () {\r\n        console.log(this.className_key + \" childrenCreated!!\");\r\n        this.createLabelIcon();\r\n        this.initView();\r\n        this.addEvent();\r\n    };\r\n    LevelBase_Als.prototype.initPlayerStatus = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _a, _b;\r\n            return tslib_1.__generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        if (!this.mapData.player.status) return [3, 3];\r\n                        _a = (!this.ani_player);\r\n                        if (!_a) return [3, 2];\r\n                        _b = this;\r\n                        return [4, this.createSkeleton(this.mapData.player.url)];\r\n                    case 1:\r\n                        _a = (_b.ani_player = _c.sent());\r\n                        _c.label = 2;\r\n                    case 2:\r\n                        _a;\r\n                        if (this.box_player.getChildIndex(this.ani_player) == -1) {\r\n                            this.ani_player.x = this.mapData.player.status.x;\r\n                            this.ani_player.y = this.mapData.player.status.y;\r\n                            this.box_player.addChild(this.ani_player);\r\n                            this.ani_player.play(this.mapData.player.status.aniN, this.mapData.player.status.loop);\r\n                        }\r\n                        _c.label = 3;\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    LevelBase_Als.prototype.createLabelIcon = function () {\r\n        var skin = 'resource/assets/img/ui/game/gameinterface_baseboard_8.png';\r\n        this.icon_showLabel = new Laya.Image();\r\n        this.icon_showLabel.skin = skin;\r\n        this.icon_showLabel.visible = false;\r\n        this.lableValue = new Laya.Label();\r\n        this.lableValue.centerX = 0;\r\n        this.lableValue.centerY = -25;\r\n        this.lableValue.fontSize = 30;\r\n        this.lableValue.wordWrap = true;\r\n        this.lableValue.width = 250;\r\n        this.icon_showLabel.addChild(this.lableValue);\r\n        this.boxDialog.addChild(this.icon_showLabel);\r\n    };\r\n    LevelBase_Als.prototype.setData = function (data) {\r\n        this.viewData_ = data;\r\n        this.mapData = data;\r\n    };\r\n    LevelBase_Als.prototype.initView = function () {\r\n        this.bReturbToHome = false;\r\n        this.index = 0;\r\n        this.box_player.x = (this.index) * 1080;\r\n        this.box_game.x = (this.index) * -1080;\r\n        this.destroyAni();\r\n        this.showSoundObj = [];\r\n        this.listPlayedSoundName = [];\r\n        if (this.pGameView) {\r\n            this.pGameView.removeSelf();\r\n        }\r\n        this.pGameView = null;\r\n        this.box_player.removeChildren();\r\n        this.box_enb.removeChildren();\r\n        ViewChangeManager_Als.getInstance().CurLevelBase = this;\r\n        this.refreshViewInLevel();\r\n        this.bAniDestory = false;\r\n    };\r\n    LevelBase_Als.prototype.playAni = function (aniName, callBack, isLoop) {\r\n        if (isLoop === void 0) { isLoop = false; }\r\n        this.localAniName = aniName;\r\n        if (this.ani_player != null) {\r\n            this.ani_player.visible = true;\r\n            if (callBack) {\r\n                this.ani_player.player.off(Laya.Event.STOPPED, this, this.onComplete);\r\n                this.ani_player.player.once(Laya.Event.STOPPED, this, this.onComplete, [aniName, callBack]);\r\n            }\r\n            this.ani_player.play(aniName, isLoop);\r\n        }\r\n        else {\r\n            callBack && callBack(aniName);\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.onComplete = function (aniName, callBack) {\r\n        callBack && callBack(aniName);\r\n    };\r\n    LevelBase_Als.prototype.createSkeleton = function (url) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                return [2, new Promise(function (resolve) {\r\n                        AnimationManager_Als.instance.showSkeletonAnimation(url, function (boomAnimation) {\r\n                            boomAnimation.player.playbackRate = 1;\r\n                            boomAnimation.autoSize = true;\r\n                            boomAnimation.scale(1, 1);\r\n                            _this.aniArr.push(boomAnimation);\r\n                            resolve(boomAnimation);\r\n                        }, 0);\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    LevelBase_Als.prototype.onPlayOnce = function () {\r\n        var _this = this;\r\n        this.localData = this.mapData.player.ani[this.localAniName];\r\n        if (this.localData) {\r\n            if (this.localData.pop) {\r\n                this.popChoose();\r\n                if (this.localData.loop) {\r\n                    this.playAni(this.localData.aniName, function () {\r\n                    }, true);\r\n                }\r\n            }\r\n            else {\r\n                if (this.localData.isWin == 1) {\r\n                    this.onSuccess();\r\n                    return;\r\n                }\r\n                else if (this.localData.isWin == 2) {\r\n                    this.pGameView.showResultIcon_alse(false);\r\n                    Laya.timer.once(1000, this, function () {\r\n                        _this.onFail();\r\n                    });\r\n                    return;\r\n                }\r\n                this.playAni(this.localData.next, function () {\r\n                    _this.onPlayOnce();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.popChoose = function () {\r\n        console.log(\"int pop choose!\");\r\n        if (!this.pGameView) {\r\n            return;\r\n        }\r\n        var self = this;\r\n        this.pGameView.showChoseView_alse({\r\n            data: this.mapData.player.choose[this.index], callBack: function (right, aniName) {\r\n                self.callBack(right, aniName);\r\n            }\r\n        });\r\n    };\r\n    LevelBase_Als.prototype.onStart = function () {\r\n        var _this = this;\r\n        var start = this.mapData.player.start;\r\n        this.localData = this.mapData.player.ani[start[this.index]];\r\n        var bFlag = false;\r\n        this.playAni(this.localData.aniName, function () {\r\n            _this.onPlayOnce();\r\n        }, bFlag);\r\n    };\r\n    LevelBase_Als.prototype.callBack = function (right, aniName) {\r\n        var _this = this;\r\n        if (right) {\r\n            if (this.index < this.mapData.player.choose.length) {\r\n                this.index++;\r\n            }\r\n            this.pGameView.refreshUpIndeInfo_als(this.index, this.mapData.player.choose.length);\r\n            this.pGameView.showResultIcon_alse(right);\r\n        }\r\n        else {\r\n        }\r\n        this.playAni(aniName, function () {\r\n            _this.onPlayOnce();\r\n        });\r\n    };\r\n    LevelBase_Als.prototype.onPlayLabel = function (evt) {\r\n        if (this.bAniDestory)\r\n            return;\r\n        if (evt.name != 'undefined' || evt.name != undefined || evt.name != null) {\r\n            if (evt.name.indexOf('sound') > -1) {\r\n                this.playSound(evt);\r\n            }\r\n            else if (evt.name.indexOf('show') > -1) {\r\n                this.showLable(evt);\r\n            }\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.showLable = function (evt) {\r\n        var showArr = evt.name.split(\"_\");\r\n        var id = showArr[1];\r\n        if (!this.showLabelObj[id]) {\r\n            this.showLabelObj[id] = true;\r\n            this.showLabelView(parseInt(id));\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.playSound = function (evt) {\r\n        var soundArr = evt.name.split('_');\r\n        var count = soundArr[2];\r\n        var soundName = soundArr[1];\r\n        var index = null;\r\n        var soundObj = this.showSoundObj[this.localAniName];\r\n        if (soundObj == null) {\r\n            soundObj = {};\r\n            index = 1;\r\n            if (Number(count) == 0) {\r\n                (count) = 1 + '';\r\n            }\r\n        }\r\n        else {\r\n            index = soundObj[soundName];\r\n            if (index == null) {\r\n                index = 1;\r\n                if (Number(count) == 0) {\r\n                    (count) = 1 + '';\r\n                }\r\n            }\r\n            else {\r\n                if (Number(count) == 0) {\r\n                    (count) = 1 + '';\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        var pData = soundObj[soundName];\r\n        if (!pData) {\r\n            this.listPlayedSoundName.push(soundName);\r\n        }\r\n        soundObj[soundName] = index;\r\n        this.showSoundObj[this.localAniName] = soundObj;\r\n        Als_SoundManager.getInstance().playEffect(soundName, Number(count));\r\n    };\r\n    LevelBase_Als.prototype.showLabelView = function (id) {\r\n        var self = this;\r\n        if (self.icon_showLabel) {\r\n            Laya.timer.clearAll(self.icon_showLabel);\r\n            var stAnyData = ConfigManager_Als.getInstance().getDialogInfo(id);\r\n            if (stAnyData) {\r\n                if (stAnyData.nR == 1) {\r\n                    self.icon_showLabel.scaleX = -1;\r\n                    self.lableValue.scaleX = -1;\r\n                }\r\n                else {\r\n                    self.icon_showLabel.scaleX = 1;\r\n                    self.lableValue.scaleX = 1;\r\n                }\r\n                self.icon_showLabel.x = stAnyData.nX;\r\n                self.icon_showLabel.y = stAnyData.nY;\r\n                console.log(\"len = \", stAnyData.desc.length);\r\n                var nWith = stAnyData.desc.length * 30;\r\n                if (nWith > 250) {\r\n                    nWith = 250;\r\n                }\r\n                self.lableValue.width = nWith;\r\n                self.lableValue.text = stAnyData.desc;\r\n                self.icon_showLabel.visible = true;\r\n                Laya.timer.once(1000, self.icon_showLabel, function (icon_showLabel) {\r\n                    icon_showLabel.visible = false;\r\n                }, [self.icon_showLabel]);\r\n            }\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.destroyAni = function () {\r\n        this.bAniDestory = true;\r\n        var aniArr = this.aniArr;\r\n        var len = aniArr.length;\r\n        for (var i = 0; i < len; i++) {\r\n            var ani = aniArr[i];\r\n            if (ani) {\r\n                Laya.loader.clearRes(ani.url);\r\n                ani.stop();\r\n                ani.removeSelf();\r\n                ani.destroy(true);\r\n            }\r\n            ani = null;\r\n        }\r\n        aniArr.splice(0, len);\r\n        this.showLabelObj = {};\r\n        this.ani_player = null;\r\n    };\r\n    LevelBase_Als.prototype.destorySound = function () {\r\n        var nLen = this.listPlayedSoundName.length;\r\n        for (var i = 0; i < nLen; ++i) {\r\n            Als_SoundManager.getInstance().destoryOneSound(this.listPlayedSoundName[i]);\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.addEvent = function () {\r\n    };\r\n    LevelBase_Als.prototype.removeEvent = function () {\r\n    };\r\n    LevelBase_Als.prototype.removeSelf = function () {\r\n        return _super.prototype.removeSelf.call(this);\r\n    };\r\n    LevelBase_Als.prototype.onRemoved = function () {\r\n        _super.prototype.onRemoved.call(this);\r\n        this.removeEvent();\r\n        this.destroyAni();\r\n    };\r\n    LevelBase_Als.prototype.showGameHome = function () {\r\n        this.initPlayerStatus();\r\n        ViewManager.getInstance().showView(GameHomeView_Als);\r\n    };\r\n    LevelBase_Als.prototype.showGameView = function () {\r\n    };\r\n    LevelBase_Als.prototype.startGame = function () {\r\n        ViewChangeManager_Als.getInstance().CommonView.rmobtev_alt();\r\n        MiniManeger_Als.instance.StartRecorderVideo();\r\n        this.bReturbToHome = false;\r\n        this.pGameView = ViewManager.getInstance().showView(GameView_Als);\r\n        this.pGameView.startVideoImage_alse();\r\n        this.pGameView.refreshChoose();\r\n        this.pGameView.refreshUpIndeInfo_als(this.index, this.mapData.player.choose.length);\r\n        if (!PlayerDataManager_Als.getInstance().checkDyLogIndexrecorded(PlayerDataManager_Als.getInstance().getCurLevelToChallenge())) {\r\n            ViewChangeManager_Als.getInstance().startGame();\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.stopGame = function () {\r\n    };\r\n    LevelBase_Als.prototype.restartGame = function (bReStartAll) {\r\n        if (bReStartAll === void 0) { bReStartAll = true; }\r\n        MiniManeger_Als.instance.StartRecorderVideo();\r\n        this.bReturbToHome = false;\r\n        this.showSoundObj = [];\r\n        this.showLabelObj = [];\r\n        if (this.pGameView) {\r\n            this.pGameView.startVideoImage_alse();\r\n            this.pGameView.hideChoseView_als();\r\n            this.pGameView.refreshChoose();\r\n            this.pGameView.refreshUpIndeInfo_als(this.index, this.mapData.player.choose.length);\r\n        }\r\n        else {\r\n            console.error(\"can not find pGameView!\");\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.returnToGameHome = function () {\r\n        MiniManeger_Als.instance.StopVideo();\r\n        this.bReturbToHome = true;\r\n        this.destroyAni();\r\n        if (this.icon_showLabel) {\r\n            this.icon_showLabel.visible = false;\r\n        }\r\n        if (PlayerDataManager_Als.getInstance().getCurLevelToChallenge() == PlayerDataManager_Als.getInstance().getLevelToChangeMaxLevel()) {\r\n            this.initView();\r\n        }\r\n        else {\r\n            if (this.pGameView) {\r\n                this.pGameView.removeSelf();\r\n            }\r\n            this.pGameView = null;\r\n            GameStateManager_Als.getInstance().levelState = EnterGameType.enum_EnterGameType_GameHome;\r\n            LevelManager_Als.getInstance().createLevelScene(PlayerDataManager_Als.getInstance().getLevelToChangeMaxLevel());\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.clearData = function () {\r\n        this.box_player.removeChildren();\r\n        this.box_enb.removeChildren();\r\n    };\r\n    LevelBase_Als.prototype.onSuccess = function () {\r\n        if (this.bReturbToHome) {\r\n            return;\r\n        }\r\n        console.log(\"Level Success!\");\r\n        if (!MiniManeger_Als.instance.isWxMiniGameForOperReq()) {\r\n            if (BaseConst.infos.gameInfo.openPsAward == 1 && ConfigManager_Als.getInstance().getTreasureByCurLevel() == 1) {\r\n                ViewManager.getInstance().showView(SuccessfulEntryOneView_Als);\r\n            }\r\n            else {\r\n                if (PlayerDataManager_Als.getInstance().getCurLevelToChallenge() % 2 == 1) {\r\n                    console.log(\"PlayerDataManager.getInstance().getCurLevelToChallenge() = \", PlayerDataManager_Als.getInstance().getCurLevelToChallenge());\r\n                    ViewManager.getInstance().showView(SuccessfulEntryOneViewTwo_Als);\r\n                }\r\n                else {\r\n                    ViewManager.getInstance().showView(SuccessfulEntryThreeView_Als);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (LevelManager_Als.getInstance().nCurLevel >= 3) {\r\n                MoreGameView_Als.bSuccess = true;\r\n                ViewManager.getInstance().showView(MoreGameView_Als);\r\n            }\r\n            else {\r\n                ViewManager.getInstance().showView(SuccessfulEntryThreeView_Als);\r\n            }\r\n            this.pGameView.closeWeCatMoreGameView();\r\n            PlayerDataManager_Als.getInstance().nGotoLevel = 0;\r\n        }\r\n        if (!PlayerDataManager_Als.getInstance().checkDyLogIndexrecorded(PlayerDataManager_Als.getInstance().getCurLevelToChallenge())) {\r\n            ViewChangeManager_Als.getInstance().endGame();\r\n            PlayerDataManager_Als.getInstance().recordDyLogIndex(PlayerDataManager_Als.getInstance().getCurLevelToChallenge());\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.onFail = function () {\r\n        if (this.bReturbToHome) {\r\n            return;\r\n        }\r\n        if (MiniManeger_Als.instance.isWxMiniGameForOperReq()) {\r\n            this.pGameView.closeWeCatMoreGameView();\r\n            PlayerDataManager_Als.getInstance().nGotoLevel = 0;\r\n        }\r\n        console.log(\"Level Fail!\");\r\n        ViewManager.getInstance().showView(FailEntryOneView_Als);\r\n        if (!PlayerDataManager_Als.getInstance().checkDyLogIndexrecorded(PlayerDataManager_Als.getInstance().getCurLevelToChallenge())) {\r\n            ViewChangeManager_Als.getInstance().endGame();\r\n            PlayerDataManager_Als.getInstance().recordDyLogIndex(PlayerDataManager_Als.getInstance().getCurLevelToChallenge());\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.closeGameView = function () {\r\n        if (this.pGameView) {\r\n            this.pGameView.removeSelf();\r\n            this.pGameView = null;\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.refreshViewInLevel = function () {\r\n        var nCurState = GameStateManager_Als.getInstance().levelState;\r\n        if (nCurState == EnterGameType.enum_EnterGameType_GameHome) {\r\n            this.showGameHome();\r\n            if (this.pGameView) {\r\n                this.pGameView.removeSelf();\r\n            }\r\n        }\r\n        else {\r\n            if (nCurState == EnterGameType.enum_EnterGameType_Next\r\n                || nCurState == EnterGameType.enum_EnterGameType_ChooseLevel) {\r\n                this.startGame();\r\n            }\r\n        }\r\n    };\r\n    LevelBase_Als.prototype.getCurChooseInfo = function () {\r\n        return this.mapData.player.choose[this.index];\r\n    };\r\n    LevelBase_Als.prototype.levelOnShow = function () {\r\n    };\r\n    LevelBase_Als.prototype.levelOnHide = function () {\r\n    };\r\n    return LevelBase_Als;\r\n}(BaseSceneUISkin));\r\nexport { LevelBase_Als };\r\n",
  "references": [
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/manager/AnimationManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/common/SoundManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/GameHomeView.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/games/ViewChangeManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/games/GameStateManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/games/CommonDefine.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/common/GameDataManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/GameView.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/manager/LevelManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/games/ConfigManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/minigame/MiniManeger.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/games/GameLogicProcessingManager.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/common/GameData.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/game/MoreGameOperRequest.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/game/moregame/MoreGameView.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/game/Als_PopView/ShareRecordVideoView.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/game/Als_PopView/SuccessfulEntryOneView.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/game/Als_PopView/SuccessfulEntryThreeView.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/game/Als_PopView/SuccessfulEntryOneViewTwo.ts",
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/views/game/Als_PopView/SettlementVew/FailEntryOneView.ts"
  ]
}
