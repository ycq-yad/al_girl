{
  "code": "import * as tslib_1 from \"tslib\";\r\nimport Als_SoundConst from \"../common/SoundConst\";\r\nvar Als_SoundManager = (function () {\r\n    function Als_SoundManager() {\r\n        this._shakeIsOpen = true;\r\n        this._soundIsOpen = true;\r\n        this.effectPool = {};\r\n        this._musicOpen = true;\r\n        this._bgvolume = 1;\r\n        this.effectPools = {};\r\n        this.onPlaySoundNum = 0;\r\n        this.effectVolume = 1;\r\n        this._soundOpen = true;\r\n    }\r\n    Als_SoundManager.getInstance = function () {\r\n        if (!Als_SoundManager.instance) {\r\n            Als_SoundManager.instance = new Als_SoundManager();\r\n        }\r\n        return Als_SoundManager.instance;\r\n    };\r\n    Object.defineProperty(Als_SoundManager.prototype, \"shakeIsOpen\", {\r\n        get: function () {\r\n            return this._shakeIsOpen;\r\n        },\r\n        set: function (isOpen) {\r\n            this._shakeIsOpen = isOpen;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Als_SoundManager.prototype, \"soundIsOpen\", {\r\n        get: function () {\r\n            return this._soundIsOpen;\r\n        },\r\n        set: function (isOpen) {\r\n            this._soundIsOpen = isOpen;\r\n            this.musicOpen = isOpen;\r\n            this.soundOpen = isOpen;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Als_SoundManager.prototype, \"musicOpen\", {\r\n        get: function () {\r\n            return this._musicOpen;\r\n        },\r\n        set: function (value) {\r\n            this._musicOpen = value;\r\n            if (value) {\r\n                this.playBgMusic();\r\n            }\r\n            else {\r\n                this.stopBgMusic();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Als_SoundManager.prototype, \"bgm\", {\r\n        get: function () {\r\n            return this._bgm;\r\n        },\r\n        set: function (bgm) {\r\n            if (!this._bgm || this._bgm != bgm) {\r\n                this._bgm = bgm;\r\n                this.playBgMusic();\r\n            }\r\n            else if (this._bgm == bgm) {\r\n                this.stopBgMusic();\r\n                this.playBgMusic();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Als_SoundManager.prototype, \"bgvolume\", {\r\n        get: function () {\r\n            return this._bgvolume;\r\n        },\r\n        set: function (value) {\r\n            this.musicChannel && (this.musicChannel.volume = value);\r\n            this._bgvolume = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Als_SoundManager.prototype.playBgMusic = function () {\r\n        console.log(\"playBgm >>>\", this._bgm, this.musicOpen);\r\n        if (!this._bgm)\r\n            return;\r\n        if (!this.musicOpen)\r\n            return;\r\n        this.playMusic();\r\n    };\r\n    Als_SoundManager.prototype.playMusic = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _url, _a;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (!this.soundChannel) return [3, 1];\r\n                        this.soundChannel.resume();\r\n                        return [3, 3];\r\n                    case 1:\r\n                        _url = ResUtil.getIntance().defaultOriginUrl + \"resource/assets/sounds/\" + this._bgm + \".mp3\";\r\n                        console.log(\"bgm url >>>\", _url);\r\n                        _a = this;\r\n                        return [4, Laya.SoundManager.playMusic(_url, 0)];\r\n                    case 2:\r\n                        _a.soundChannel = _b.sent();\r\n                        _b.label = 3;\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Als_SoundManager.prototype.pauseBgm = function () {\r\n        console.log(\"pauseBgm >>>\");\r\n        this.soundChannel && this.soundChannel.pause();\r\n    };\r\n    Als_SoundManager.prototype.stopBgMusic = function () {\r\n        console.log(\"stopBgm >>>\");\r\n        Laya.SoundManager.stopMusic();\r\n    };\r\n    Object.defineProperty(Als_SoundManager.prototype, \"soundOpen\", {\r\n        get: function () {\r\n            return this._soundOpen;\r\n        },\r\n        set: function (_soundOpen) {\r\n            this._soundOpen = _soundOpen;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Als_SoundManager.prototype.destoryOneSound = function (soundName) {\r\n        var _url = Als_SoundConst.getKeyUrl(soundName);\r\n        if (DeviceUtil.isMiniGame()) {\r\n            _url = Laya.URL.basePath + _url;\r\n        }\r\n        Laya.loader.clearRes(_url);\r\n        if (!DeviceUtil.isQQMiniGame() && !DeviceUtil.isWXMiniGame()) {\r\n            this.effectPool[_url].destroy();\r\n            this.effectPool[_url] = null;\r\n        }\r\n        this.effectPools[_url].destroy();\r\n        this.effectPools[_url] = null;\r\n    };\r\n    Als_SoundManager.prototype.playEffect = function (soundUrl, times) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _url, sound, soundChannel, soundChannel;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _url = Als_SoundConst.getKeyUrl(soundUrl);\r\n                        if (this._soundOpen == false || !soundUrl || soundUrl == \"\")\r\n                            return [2];\r\n                        if (DeviceUtil.isQQMiniGame() || DeviceUtil.isWXMiniGame()) {\r\n                            this.playMiniGameEffect(Laya.URL.basePath + _url);\r\n                            return [2];\r\n                        }\r\n                        sound = this.effectPool[soundUrl];\r\n                        if (!(!sound || !sound.audioBuffer || !sound._disposed)) return [3, 5];\r\n                        return [4, ResUtil.getIntance().getAsyncRESByUrl(_url)];\r\n                    case 1:\r\n                        sound = _a.sent();\r\n                        if (!sound) return [3, 2];\r\n                        this.effectPool[soundUrl] = sound;\r\n                        soundChannel = sound.play(0, times);\r\n                        soundChannel.volume = this.effectVolume;\r\n                        return [3, 4];\r\n                    case 2: return [4, ResUtil.getIntance().getAsyncRESByUrl(_url).then(function () {\r\n                            _this.playEffect(soundUrl, times);\r\n                        })];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2];\r\n                    case 4: return [3, 6];\r\n                    case 5:\r\n                        soundChannel = sound.play(0, times);\r\n                        if (soundChannel) {\r\n                            soundChannel.play();\r\n                        }\r\n                        soundChannel.volume = this.effectVolume;\r\n                        _a.label = 6;\r\n                    case 6: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Als_SoundManager.prototype.stopEffect = function (soundUrl) {\r\n        var stLayaSound = this.effectPool[soundUrl];\r\n        if (stLayaSound) {\r\n            stLayaSound.dispose;\r\n        }\r\n    };\r\n    Als_SoundManager.prototype.playMiniGameEffect = function (soundUrl) {\r\n        if (DeviceUtil.isWXMiniGame() || DeviceUtil.isQQMiniGame()) {\r\n            var innerAudioContext_1 = this.effectPools[soundUrl];\r\n            if (!innerAudioContext_1) {\r\n                Als_SoundManager.getInstance().effectPools[soundUrl] = innerAudioContext_1 = platform.createInnerAudioContext();\r\n                innerAudioContext_1.autoplay = true;\r\n                innerAudioContext_1.src = soundUrl;\r\n                innerAudioContext_1.onError(function () {\r\n                    innerAudioContext_1.destroy();\r\n                    Als_SoundManager.getInstance().effectPools[soundUrl] = null;\r\n                });\r\n                innerAudioContext_1.onStop(function () {\r\n                    innerAudioContext_1.destroy();\r\n                    Als_SoundManager.getInstance().effectPools[soundUrl] = null;\r\n                });\r\n            }\r\n            innerAudioContext_1.play();\r\n            return;\r\n        }\r\n        var miniSounds = this.effectPools[soundUrl];\r\n        if (!miniSounds) {\r\n            this.effectPools[soundUrl] = miniSounds = [];\r\n        }\r\n        var miniSound;\r\n        if (miniSounds.length < 1) {\r\n            miniSound = new MiniGameSound();\r\n            miniSound.create(soundUrl);\r\n        }\r\n        else {\r\n            miniSound = miniSounds.shift();\r\n            if (miniSound.isEnded == false) {\r\n                miniSound = new MiniGameSound();\r\n                miniSound.create(soundUrl);\r\n            }\r\n            else {\r\n                miniSound.play();\r\n            }\r\n        }\r\n        this.onPlaySoundNum += 1;\r\n    };\r\n    return Als_SoundManager;\r\n}());\r\nexport default Als_SoundManager;\r\nvar MiniGameSound = (function () {\r\n    function MiniGameSound() {\r\n    }\r\n    MiniGameSound.prototype.create = function (soundUrl) {\r\n        var _this = this;\r\n        this.innerAudioContext = platform.createInnerAudioContext();\r\n        this.innerAudioContext.onEnded(function () {\r\n            _this.isEnded = true;\r\n            Als_SoundManager.getInstance().effectPools[_this.soundUrl].push(_this);\r\n            Als_SoundManager.getInstance().onPlaySoundNum -= 1;\r\n        });\r\n        this.isEnded = false;\r\n        this.soundUrl = soundUrl;\r\n        this.innerAudioContext.src = soundUrl;\r\n        this.innerAudioContext.autoplay = true;\r\n    };\r\n    MiniGameSound.prototype.play = function () {\r\n        this.innerAudioContext.play();\r\n    };\r\n    return MiniGameSound;\r\n}());\r\n",
  "references": [
    "E:/laya/project/laya_girl_ts_wecat_git/src/script/common/SoundConst.ts"
  ]
}
